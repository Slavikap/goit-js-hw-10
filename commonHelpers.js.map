{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysElement = document.querySelector('[data-days]');\nconst hoursElement = document.querySelector('[data-hours]');\nconst minutesElement = document.querySelector('[data-minutes]');\nconst secondsElement = document.querySelector('[data-seconds]');\n\nlet countdownInterval;\nlet timerStarted = false; // Прапорець, що вказує, чи запущено таймер\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const currentDate = new Date();\n  if (datetimePicker.value && new Date(datetimePicker.value) < currentDate) {\n    startButton.disabled = true;\n  }\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n\n    if (!selectedDate || selectedDate < currentDate) {\n      iziToast.show({\n        title: '',\n        message: 'Виберіть дату в майбутньому',\n        color: 'red',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nfunction startCountdown() {\n  if (timerStarted) return; // Якщо таймер вже запущено, виходимо з функції\n  timerStarted = true; // Позначаємо, що таймер запущено\n  const userSelectedDate = new Date(datetimePicker.value).getTime();\n  const currentDate = new Date().getTime();\n  let timeDifference = userSelectedDate - currentDate;\n\n  if (timeDifference <= 0) {\n    clearInterval(countdownInterval);\n    startButton.disabled = true;\n    return;\n  }\n\n  // Блокуємо можливість змінювати дату під час роботи таймера\n  datetimePicker.setAttribute('disabled', true);\n\n  function updateTimerUI(timeDifference) {\n    if (timeDifference <= 0) {\n      daysElement.innerText = '00';\n      hoursElement.innerText = '00';\n      minutesElement.innerText = '00';\n      secondsElement.innerText = '00';\n      startButton.disabled = false; // Після закінчення таймера кнопку робимо активною\n      datetimePicker.removeAttribute('disabled'); // Розблоковуємо можливість вибору нової дати\n      return;\n    }\n  \n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    daysElement.innerText = addLeadingZero(days);\n    hoursElement.innerText = addLeadingZero(hours);\n    minutesElement.innerText = addLeadingZero(minutes);\n    secondsElement.innerText = addLeadingZero(seconds);\n  }\n\n  countdownInterval = setInterval(() => {\n    timeDifference -= 1000; // Зменшуємо різницю на 1 секунду\n    if (timeDifference <= 0) {\n      clearInterval(countdownInterval);\n      startButton.disabled = true;\n      updateTimerUI(0); // Оновлюємо інтерфейс, показуючи 00:00:00\n      timerStarted = false; // Позначаємо, що таймер зупинено\n      return;\n    }\n    updateTimerUI(timeDifference);\n  }, 1000);\n}  \n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : `${value}`;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.addEventListener('click', () => {\n  startCountdown();\n  startButton.disabled = true; // При кожному натисканні кнопку робимо неактивною\n});\n"],"names":["datetimePicker","startButton","daysElement","hoursElement","minutesElement","secondsElement","countdownInterval","timerStarted","currentDate","options","selectedDates","selectedDate","iziToast","flatpickr","startCountdown","userSelectedDate","timeDifference","updateTimerUI","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAE9D,IAAIC,EACAC,EAAe,GAEnB,OAAO,iBAAiB,mBAAoB,IAAM,CAChD,MAAMC,EAAc,IAAI,KACpBR,EAAe,OAAS,IAAI,KAAKA,EAAe,KAAK,EAAIQ,IAC3DP,EAAY,SAAW,GAE3B,CAAC,EAED,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAGhC,CAACC,GAAgBA,EAFD,IAAI,MAGtBC,EAAS,KAAK,CACZ,MAAO,GACP,QAAS,8BACT,MAAO,MACP,SAAU,UAClB,CAAO,EACDX,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAY,EAAUb,EAAgBS,CAAO,EAEjC,SAASK,GAAiB,CACxB,GAAIP,EAAc,OAClBA,EAAe,GACf,MAAMQ,EAAmB,IAAI,KAAKf,EAAe,KAAK,EAAE,UAClDQ,EAAc,IAAI,KAAM,EAAC,QAAO,EACtC,IAAIQ,EAAiBD,EAAmBP,EAExC,GAAIQ,GAAkB,EAAG,CACvB,cAAcV,CAAiB,EAC/BL,EAAY,SAAW,GACvB,MACD,CAGDD,EAAe,aAAa,WAAY,EAAI,EAE5C,SAASiB,EAAcD,EAAgB,CACrC,GAAIA,GAAkB,EAAG,CACvBd,EAAY,UAAY,KACxBC,EAAa,UAAY,KACzBC,EAAe,UAAY,KAC3BC,EAAe,UAAY,KAC3BJ,EAAY,SAAW,GACvBD,EAAe,gBAAgB,UAAU,EACzC,MACD,CAED,KAAM,CAAE,KAAAkB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAClEd,EAAY,UAAYqB,EAAeL,CAAI,EAC3Cf,EAAa,UAAYoB,EAAeJ,CAAK,EAC7Cf,EAAe,UAAYmB,EAAeH,CAAO,EACjDf,EAAe,UAAYkB,EAAeF,CAAO,CAClD,CAEDf,EAAoB,YAAY,IAAM,CAEpC,GADAU,GAAkB,IACdA,GAAkB,EAAG,CACvB,cAAcV,CAAiB,EAC/BL,EAAY,SAAW,GACvBgB,EAAc,CAAC,EACfV,EAAe,GACf,MACD,CACDU,EAAcD,CAAc,CAC7B,EAAE,GAAI,CACT,CAEA,SAASO,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAK,GAAGA,CAAK,EAC5C,CAEA,SAASF,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEApB,EAAY,iBAAiB,QAAS,IAAM,CAC1Ca,IACAb,EAAY,SAAW,EACzB,CAAC"}